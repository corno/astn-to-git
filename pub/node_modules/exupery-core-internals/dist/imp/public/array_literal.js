"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.array_literal = array_literal;
const not_set_1 = require("./not_set");
const set_1 = require("./set");
/**
 * this is an implementation, not public by design
 * If you feel the need to rename this class, don't rename it to 'Array',
 * it will break the 'instanceOf Array' test
 */
class Array_Class {
    constructor(data) {
        this.data = data;
    }
    map($v) {
        return array_literal(this.data.map((entry) => {
            return $v(entry);
        }));
    }
    //internal methods
    __for_each($i) {
        this.data.forEach(($) => {
            $i($);
        });
    }
    __get_length() {
        return this.data.length;
    }
    __get_element_at(index) {
        if (index < 0 || index >= this.data.length) {
            return (0, not_set_1.not_set)();
        }
        return (0, set_1.set)(this.data[index]);
    }
    __get_raw_copy() {
        return this.data.slice();
    }
}
/**
 * returns a Exupery array

 * @param source An array literal
 * @returns
 */
function array_literal(source) {
    if (!(source instanceof Array)) {
        throw new Error("invalid input in 'array_literal'");
    }
    const data = source.slice(); //create a copy
    return new Array_Class(data);
}
