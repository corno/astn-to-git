import * as _i_core from "../../../core/resolved";
export type _T_Errors = _i_core._T_State_Group<null, readonly ['directory does not exist', null] | readonly ['node is not a directory', null]>;
export type _T_Node_Type = _i_core._T_State_Group<null, readonly ['directory', null] | readonly ['file', null]>;
export type _T_Parameters = _T_Path;
export type _T_Path = {
    readonly 'escape spaces in path': boolean;
    readonly 'path': string;
};
export type _T_Result = _i_core._T_Dictionary<null, _T_Node_Type>;
export type Errors = _T_Errors;
export type Node_Type = _T_Node_Type;
export type Parameters = _T_Parameters;
export type Path = _T_Path;
export type Result = _T_Result;
export declare namespace _T_Errors {
    namespace SG {
        type directory_does_not_exist = null;
        type node_is_not_a_directory = null;
    }
    type SG = readonly ['directory does not exist', null] | readonly ['node is not a directory', null];
}
export declare namespace _T_Node_Type {
    namespace SG {
        type directory = null;
        type file = null;
    }
    type SG = readonly ['directory', null] | readonly ['file', null];
}
export declare namespace _T_Parameters {
}
export declare namespace _T_Path {
    type escape_spaces_in_path = boolean;
    type path = string;
}
export declare namespace _T_Result {
    namespace D {
    }
    type D = _T_Node_Type;
}
export declare namespace Errors {
    namespace SG {
        type directory_does_not_exist = null;
        type node_is_not_a_directory = null;
    }
    type SG = readonly ['directory does not exist', null] | readonly ['node is not a directory', null];
}
export declare namespace Node_Type {
    namespace SG {
        type directory = null;
        type file = null;
    }
    type SG = readonly ['directory', null] | readonly ['file', null];
}
export declare namespace Parameters {
}
export declare namespace Path {
    type escape_spaces_in_path = boolean;
    type path = string;
}
export declare namespace Result {
    namespace D {
    }
    type D = _T_Node_Type;
}
