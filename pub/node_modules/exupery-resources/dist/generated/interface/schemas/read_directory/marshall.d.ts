import * as _i_in from "./data_types/source";
import * as _i_out from "../../core/astn_target";
import * as _i_vs from "./value_serializers";
export type _T_Errors = ($$_: _i_in._T_Errors, $$_p: {
    readonly 'value serializers': _i_vs._T_Value_Serializers;
}) => _i_out._T_Value;
export type _T_Node_Type = ($$_: _i_in._T_Node_Type, $$_p: {
    readonly 'value serializers': _i_vs._T_Value_Serializers;
}) => _i_out._T_Value;
export type _T_Parameters = ($$_: _i_in._T_Parameters, $$_p: {
    readonly 'value serializers': _i_vs._T_Value_Serializers;
}) => _i_out._T_Value;
export type _T_Path = ($$_: _i_in._T_Path, $$_p: {
    readonly 'value serializers': _i_vs._T_Value_Serializers;
}) => _i_out._T_Value;
export type _T_Result = ($$_: _i_in._T_Result, $$_p: {
    readonly 'value serializers': _i_vs._T_Value_Serializers;
}) => _i_out._T_Value;
export type Errors = _T_Errors;
export type Node_Type = _T_Node_Type;
export type Parameters = _T_Parameters;
export type Path = _T_Path;
export type Result = _T_Result;
export declare namespace _T_Errors {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Errors;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace _T_Node_Type {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Node_Type;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace _T_Parameters {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Parameters;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace _T_Path {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Path;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace _T_Result {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Result;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace Errors {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Errors;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace Node_Type {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Node_Type;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace Parameters {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Parameters;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace Path {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Path;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace Result {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Result;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
