import * as _pt from 'exupery-core-types';
import * as _i_core from "../../../core/unconstrained";
export type _T_Errors = _i_core._T_State_Group<null, readonly ['device not ready', null] | readonly ['file too large', null] | readonly ['node is not a file', null] | readonly ['permission denied', null] | readonly ['source does not exist', null]>;
export type _T_Parameters = {
    readonly 'options': {
        readonly 'errorOnExist': _pt.Optional_Value<boolean>;
        readonly 'force': _pt.Optional_Value<boolean>;
        readonly 'recursive': _pt.Optional_Value<boolean>;
    };
    readonly 'source': _T_Path;
    readonly 'target': _T_Path;
};
export type _T_Path = {
    readonly 'escape spaces in path': boolean;
    readonly 'path': string;
};
export type Errors = _T_Errors;
export type Parameters = _T_Parameters;
export type Path = _T_Path;
export declare namespace _T_Errors {
    namespace SG {
        type device_not_ready = null;
        type file_too_large = null;
        type node_is_not_a_file = null;
        type permission_denied = null;
        type source_does_not_exist = null;
    }
    type SG = readonly ['device not ready', null] | readonly ['file too large', null] | readonly ['node is not a file', null] | readonly ['permission denied', null] | readonly ['source does not exist', null];
}
export declare namespace _T_Parameters {
    namespace options {
        namespace errorOnExist {
            type O = boolean;
        }
        type errorOnExist = _pt.Optional_Value<boolean>;
        namespace force {
            type O = boolean;
        }
        type force = _pt.Optional_Value<boolean>;
        namespace recursive {
            type O = boolean;
        }
        type recursive = _pt.Optional_Value<boolean>;
    }
    type options = {
        readonly 'errorOnExist': _pt.Optional_Value<boolean>;
        readonly 'force': _pt.Optional_Value<boolean>;
        readonly 'recursive': _pt.Optional_Value<boolean>;
    };
    namespace source {
    }
    type source = _T_Path;
    namespace target {
    }
    type target = _T_Path;
}
export declare namespace _T_Path {
    type escape_spaces_in_path = boolean;
    type path = string;
}
export declare namespace Errors {
    namespace SG {
        type device_not_ready = null;
        type file_too_large = null;
        type node_is_not_a_file = null;
        type permission_denied = null;
        type source_does_not_exist = null;
    }
    type SG = readonly ['device not ready', null] | readonly ['file too large', null] | readonly ['node is not a file', null] | readonly ['permission denied', null] | readonly ['source does not exist', null];
}
export declare namespace Parameters {
    namespace options {
        namespace errorOnExist {
            type O = boolean;
        }
        type errorOnExist = _pt.Optional_Value<boolean>;
        namespace force {
            type O = boolean;
        }
        type force = _pt.Optional_Value<boolean>;
        namespace recursive {
            type O = boolean;
        }
        type recursive = _pt.Optional_Value<boolean>;
    }
    type options = {
        readonly 'errorOnExist': _pt.Optional_Value<boolean>;
        readonly 'force': _pt.Optional_Value<boolean>;
        readonly 'recursive': _pt.Optional_Value<boolean>;
    };
    namespace source {
    }
    type source = _T_Path;
    namespace target {
    }
    type target = _T_Path;
}
export declare namespace Path {
    type escape_spaces_in_path = boolean;
    type path = string;
}
