"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const _easync = __importStar(require("exupery-core-async"));
const _ei = __importStar(require("exupery-core-internals"));
const fs_1 = require("fs");
const possibly_escape_file_name_1 = require("../../__internal/possibly_escape_file_name");
const $$ = ($p) => {
    return _easync.__create_unguaranteed_procedure({
        'execute': (on_success, on_exception) => {
            (0, fs_1.rm)((0, possibly_escape_file_name_1.$$)($p.path.path, $p.path['escape spaces in path']), {
                'recursive': true,
            }, (err) => {
                if (err) {
                    if (err.code === 'ENOENT' && !$p['error if not exists']) {
                        on_success();
                    }
                    else {
                        on_exception(_ei.block(() => {
                            if (err.code === 'ENOENT') {
                                return ['node does not exist', null];
                            }
                            if (err.code === 'EACCES' || err.code === 'EPERM') {
                                return ['permission denied', null];
                            }
                            // if (err.code === 'EISDIR' || err.code === 'ENOTDIR') {
                            //     return ['node is not a directory', null]
                            // }
                            // if (err.code === 'ERR_FS_EISDIR') {
                            //     return ['node is a directory', null]
                            // }
                            return _ei.panic(`unhandled fs.rm error code: ${err.code}`);
                        }));
                    }
                }
                else {
                    on_success();
                }
            });
        }
    });
};
exports.$$ = $$;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb2NlZHVyZXMvdW5ndWFyYW50ZWVkL3JlbW92ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDREQUE2QztBQUM3Qyw0REFBNkM7QUFHN0MsMkJBQWdDO0FBSWhDLDBGQUE2RjtBQUV0RixNQUFNLEVBQUUsR0FBdUUsQ0FDbEYsRUFBRSxFQUNKLEVBQUU7SUFDQSxPQUFPLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztRQUMzQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLEVBQUU7WUFDcEMsSUFBQSxPQUFLLEVBQ0QsSUFBQSw4QkFBMEIsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsRUFDMUU7Z0JBQ0ksV0FBVyxFQUFFLElBQUk7YUFDcEIsRUFDRCxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUVKLElBQUksR0FBRyxFQUFFLENBQUM7b0JBQ04sSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUM7d0JBQ3RELFVBQVUsRUFBRSxDQUFBO29CQUNoQixDQUFDO3lCQUFNLENBQUM7d0JBQ0osWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBYSxFQUFFOzRCQUNsQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFLENBQUM7Z0NBQ3hCLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsQ0FBQTs0QkFDeEMsQ0FBQzs0QkFDRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFLENBQUM7Z0NBQ2hELE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQTs0QkFDdEMsQ0FBQzs0QkFDRCx5REFBeUQ7NEJBQ3pELCtDQUErQzs0QkFDL0MsSUFBSTs0QkFDSixzQ0FBc0M7NEJBQ3RDLDJDQUEyQzs0QkFDM0MsSUFBSTs0QkFDSixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsK0JBQStCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO3dCQUMvRCxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUNQLENBQUM7Z0JBQ0wsQ0FBQztxQkFBTSxDQUFDO29CQUNKLFVBQVUsRUFBRSxDQUFBO2dCQUNoQixDQUFDO1lBQ0wsQ0FBQyxDQUNKLENBQUE7UUFDTCxDQUFDO0tBQ0osQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFBO0FBdkNZLFFBQUEsRUFBRSxNQXVDZCJ9