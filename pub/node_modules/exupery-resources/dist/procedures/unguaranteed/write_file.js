"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const _easync = __importStar(require("exupery-core-async"));
const _ei = __importStar(require("exupery-core-internals"));
const fs_1 = require("fs");
const path_1 = require("path");
const possibly_escape_file_name_1 = require("../../__internal/possibly_escape_file_name");
const $$ = ($p) => {
    return _easync.__create_unguaranteed_procedure({
        'execute': (on_success, on_exception) => {
            const fname = (0, possibly_escape_file_name_1.$$)($p.path.path, $p.path['escape spaces in path']);
            (0, fs_1.mkdir)((0, path_1.dirname)(fname), {
                'recursive': true
            }, (err, path) => {
                if (err) {
                    on_exception(_ei.block(() => {
                        if (err.code === 'EACCES' || err.code === 'EPERM') {
                            return ['permission denied', null];
                        }
                        return _ei.panic(`unhandled fs.writeFile error code: ${err.code}`);
                    }));
                    return;
                }
                (0, fs_1.writeFile)(fname, $p.data, (err) => {
                    if (err) {
                        on_exception(_ei.block(() => {
                            if (err.code === 'EACCES' || err.code === 'EPERM') {
                                return ['permission denied', null];
                            }
                            return _ei.panic(`unhandled fs.writeFile error code: ${err.code}`);
                        }));
                    }
                    else {
                        on_success();
                    }
                });
            });
        }
    });
};
exports.$$ = $$;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGVfZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9jZWR1cmVzL3VuZ3VhcmFudGVlZC93cml0ZV9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNERBQTZDO0FBQzdDLDREQUE2QztBQUc3QywyQkFBZ0U7QUFFaEUsK0JBQTZDO0FBSTdDLDBGQUE2RjtBQUV0RixNQUFNLEVBQUUsR0FBdUUsQ0FDbEYsRUFBRSxFQUNKLEVBQUU7SUFDQSxPQUFPLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztRQUMzQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLEVBQUU7WUFFcEMsTUFBTSxLQUFLLEdBQUcsSUFBQSw4QkFBMEIsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQTtZQUN4RixJQUFBLFVBQVEsRUFDSixJQUFBLGNBQVksRUFBQyxLQUFLLENBQUMsRUFDbkI7Z0JBQ0ksV0FBVyxFQUFFLElBQUk7YUFDcEIsRUFDRCxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDVixJQUFJLEdBQUcsRUFBRSxDQUFDO29CQUNOLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQWEsRUFBRTt3QkFDbEMsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRSxDQUFDOzRCQUNoRCxPQUFPLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUE7d0JBQ3RDLENBQUM7d0JBQ0QsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtvQkFDdEUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtvQkFDSCxPQUFNO2dCQUNWLENBQUM7Z0JBQ0QsSUFBQSxjQUFZLEVBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDakMsSUFBSSxHQUFHLEVBQUUsQ0FBQzt3QkFDTixZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFhLEVBQUU7NEJBQ2xDLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUUsQ0FBQztnQ0FDaEQsT0FBTyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxDQUFBOzRCQUN0QyxDQUFDOzRCQUNELE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7d0JBQ3RFLENBQUMsQ0FBQyxDQUFDLENBQUE7b0JBQ1AsQ0FBQzt5QkFBTSxDQUFDO3dCQUNKLFVBQVUsRUFBRSxDQUFBO29CQUNoQixDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFBO1lBQ04sQ0FBQyxDQUNKLENBQUE7UUFDTCxDQUFDO0tBQ0osQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFBO0FBdENZLFFBQUEsRUFBRSxNQXNDZCJ9