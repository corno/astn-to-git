"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const _easync = __importStar(require("exupery-core-async"));
const _ei = __importStar(require("exupery-core-internals"));
const node_child_process_1 = require("node:child_process");
// ---------------------------------------------------------------
/**
 *
 * The executable being executed is assumed to only cause side effects
 * and not return any meaningful data, std::out is therefor ignored
 */
const $$ = ($p) => {
    const args = $p.args.__get_raw_copy();
    return _easync.__create_unguaranteed_procedure({
        'execute': (on_success, on_exception) => {
            const child = (0, node_child_process_1.spawn)($p.program, args, {
                shell: false, // âœ… direct execution, no shell
            });
            let stderrData = "";
            child.stderr.on("data", chunk => {
                stderrData += chunk.toString("utf8");
            });
            child.on("error", err => {
                on_exception(_ei.block(() => {
                    return ['failed to spawn', { message: err instanceof Error ? err.message : `${err}` }];
                }));
            });
            child.on("close", exitCode => {
                if (exitCode === 0) {
                    on_success();
                }
                else {
                    on_exception(_ei.block(() => {
                        return ['non zero exit code', { exitCode: exitCode ?? -1, stderr: stderrData }];
                    }));
                }
            });
        }
    });
};
exports.$$ = $$;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZV9wcm9jZWR1cmVfZXhlY3V0YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9jZWR1cmVzL3VuZ3VhcmFudGVlZC9leGVjdXRlX3Byb2NlZHVyZV9leGVjdXRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNERBQTZDO0FBQzdDLDREQUE2QztBQUc3QywyREFBMEM7QUFlMUMsa0VBQWtFO0FBR2xFOzs7O0dBSUc7QUFDSSxNQUFNLEVBQUUsR0FBdUUsQ0FDbEYsRUFBRSxFQUNKLEVBQUU7SUFDQSxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3JDLE9BQU8sT0FBTyxDQUFDLCtCQUErQixDQUFDO1FBQzNDLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsRUFBRTtZQUVwQyxNQUFNLEtBQUssR0FBRyxJQUFBLDBCQUFLLEVBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7Z0JBQ2xDLEtBQUssRUFBRSxLQUFLLEVBQUUsK0JBQStCO2FBQ2hELENBQUMsQ0FBQTtZQUVGLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQTtZQUVuQixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQzVCLFVBQVUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ3hDLENBQUMsQ0FBQyxDQUFBO1lBRUYsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQ3BCLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQWEsRUFBRTtvQkFDbEMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFBO2dCQUMxRixDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ1AsQ0FBQyxDQUFDLENBQUE7WUFFRixLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDekIsSUFBSSxRQUFRLEtBQUssQ0FBQyxFQUFFLENBQUM7b0JBQ2pCLFVBQVUsRUFBRSxDQUFBO2dCQUNoQixDQUFDO3FCQUFNLENBQUM7b0JBQ0osWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBYSxFQUFFO3dCQUNsQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFBO29CQUNuRixDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNQLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUM7S0FDSixDQUFDLENBQUE7QUFDTixDQUFDLENBQUE7QUFsQ1ksUUFBQSxFQUFFLE1Ba0NkIn0=