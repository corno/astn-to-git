"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const _easync = __importStar(require("exupery-core-async"));
const node_child_process_1 = require("node:child_process");
// ---------------------------------------------------------------
/**
 *
 * The executable being executed is assumed to be side effect free
 * There is no way to give guarantees about that though
 */
const $$ = ($p) => {
    const args = $p.args.__get_raw_copy();
    return _easync.__create_guaranteed_query({
        'execute': (on_result) => {
            const child = (0, node_child_process_1.spawn)($p.program, args, {
                shell: false, // âœ… no implicit parsing
            });
            let stdoutData = "";
            let stderrData = "";
            child.stdout.on("data", chunk => {
                stdoutData += chunk.toString("utf8");
            });
            child.stderr.on("data", chunk => {
                stderrData += chunk.toString("utf8");
            });
            child.on("error", err => {
                on_result(['error', ['failed to spawn', {
                            message: err instanceof Error ? err.message : `${err}`
                        }]]);
            });
            child.on("close", exitCode => {
                if (exitCode === 0) {
                    on_result(['success', {
                            stdout: stdoutData,
                        }]);
                }
                else {
                    on_result(['error', ['non zero exit code', {
                                exitCode: exitCode ?? -1,
                                stderr: stderrData,
                            }]]);
                }
            });
        }
    });
};
exports.$$ = $$;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZV9xdWVyeV9leGVjdXRhYmxlX2FuZF9jYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9xdWVyaWVzL2d1YXJhbnRlZWQvZXhlY3V0ZV9xdWVyeV9leGVjdXRhYmxlX2FuZF9jYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDREQUE2QztBQUk3QywyREFBMEM7QUEyQjFDLGtFQUFrRTtBQUdsRTs7OztHQUlHO0FBQ0ksTUFBTSxFQUFFLEdBQWlFLENBQzVFLEVBQUUsRUFDSixFQUFFO0lBQ0EsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtJQUNyQyxPQUFPLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztRQUNyQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUVyQixNQUFNLEtBQUssR0FBRyxJQUFBLDBCQUFLLEVBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7Z0JBQ2xDLEtBQUssRUFBRSxLQUFLLEVBQUUsd0JBQXdCO2FBQ3pDLENBQUMsQ0FBQTtZQUVGLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQTtZQUNuQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUE7WUFFbkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUM1QixVQUFVLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN4QyxDQUFDLENBQUMsQ0FBQTtZQUVGLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDNUIsVUFBVSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDeEMsQ0FBQyxDQUFDLENBQUE7WUFFRixLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDcEIsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUU7NEJBQ3BDLE9BQU8sRUFBRSxHQUFHLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRTt5QkFDekQsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNSLENBQUMsQ0FBQyxDQUFBO1lBRUYsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEVBQUU7Z0JBQ3pCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRSxDQUFDO29CQUNqQixTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUU7NEJBQ2xCLE1BQU0sRUFBRSxVQUFVO3lCQUNyQixDQUFDLENBQUMsQ0FBQTtnQkFDUCxDQUFDO3FCQUFNLENBQUM7b0JBQ0osU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLEVBQUU7Z0NBQ3ZDLFFBQVEsRUFBRSxRQUFRLElBQUksQ0FBQyxDQUFDO2dDQUN4QixNQUFNLEVBQUUsVUFBVTs2QkFDckIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDUixDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDO0tBQ0osQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFBO0FBMUNZLFFBQUEsRUFBRSxNQTBDZCJ9