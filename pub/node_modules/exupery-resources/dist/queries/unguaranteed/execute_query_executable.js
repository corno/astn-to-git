"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const _easync = __importStar(require("exupery-core-async"));
const _ei = __importStar(require("exupery-core-internals"));
const node_child_process_1 = require("node:child_process");
// ---------------------------------------------------------------
/**
 *
 * The executable being executed is assumed to be side effect free
 * There is no way to give guarantees about that though
 */
const $$ = ($p) => {
    const args = $p.args.__get_raw_copy();
    return _easync.__create_unguaranteed_query({
        'execute': (on_value, on_exception) => {
            const child = (0, node_child_process_1.spawn)($p.program, args, {
                shell: false, // âœ… no implicit parsing
            });
            let stdoutData = "";
            let stderrData = "";
            child.stdout.on("data", chunk => {
                stdoutData += chunk.toString("utf8");
            });
            child.stderr.on("data", chunk => {
                stderrData += chunk.toString("utf8");
            });
            child.on("error", err => {
                on_exception(_ei.block(() => {
                    return ['failed to spawn', {
                            message: err instanceof Error ? err.message : `${err}`
                        }];
                }));
            });
            child.on("close", exitCode => {
                if (exitCode === 0) {
                    on_value({
                        stdout: stdoutData,
                    });
                }
                else {
                    on_exception(_ei.block(() => {
                        return ['non zero exit code', {
                                exitCode: exitCode ?? -1,
                                stderr: stderrData,
                            }];
                    }));
                }
            });
        }
    });
};
exports.$$ = $$;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZV9xdWVyeV9leGVjdXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3F1ZXJpZXMvdW5ndWFyYW50ZWVkL2V4ZWN1dGVfcXVlcnlfZXhlY3V0YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDREQUE2QztBQUM3Qyw0REFBNkM7QUFHN0MsMkRBQTBDO0FBeUIxQyxrRUFBa0U7QUFHbEU7Ozs7R0FJRztBQUNJLE1BQU0sRUFBRSxHQUE2RSxDQUN4RixFQUFFLEVBQ0osRUFBRTtJQUNBLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7SUFDckMsT0FBTyxPQUFPLENBQUMsMkJBQTJCLENBQUM7UUFDdkMsU0FBUyxFQUFFLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxFQUFFO1lBRWxDLE1BQU0sS0FBSyxHQUFHLElBQUEsMEJBQUssRUFBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtnQkFDbEMsS0FBSyxFQUFFLEtBQUssRUFBRSx3QkFBd0I7YUFDekMsQ0FBQyxDQUFBO1lBRUYsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFBO1lBQ25CLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQTtZQUVuQixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQzVCLFVBQVUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ3hDLENBQUMsQ0FBQyxDQUFBO1lBRUYsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUM1QixVQUFVLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN4QyxDQUFDLENBQUMsQ0FBQTtZQUVGLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQixZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFhLEVBQUU7b0JBQ2xDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTs0QkFDdkIsT0FBTyxFQUFFLEdBQUcsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFO3lCQUN6RCxDQUFDLENBQUE7Z0JBQ04sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNQLENBQUMsQ0FBQyxDQUFBO1lBRUYsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEVBQUU7Z0JBQ3pCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRSxDQUFDO29CQUNqQixRQUFRLENBQUU7d0JBQ04sTUFBTSxFQUFFLFVBQVU7cUJBQ3JCLENBQUMsQ0FBQTtnQkFDTixDQUFDO3FCQUFNLENBQUM7b0JBQ0osWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBYSxFQUFFO3dCQUNsQyxPQUFPLENBQUMsb0JBQW9CLEVBQUU7Z0NBQzFCLFFBQVEsRUFBRSxRQUFRLElBQUksQ0FBQyxDQUFDO2dDQUN4QixNQUFNLEVBQUUsVUFBVTs2QkFDckIsQ0FBQyxDQUFBO29CQUNOLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ1AsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQztLQUNKLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQTtBQTlDWSxRQUFBLEVBQUUsTUE4Q2QifQ==