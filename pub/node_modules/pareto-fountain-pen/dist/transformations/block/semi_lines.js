"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = exports.Directory = void 0;
const _ea = __importStar(require("exupery-core-alg"));
const Directory = ($) => $.map(($) => _ea.cc($, ($) => _ea.cc($, ($) => {
    switch ($[0]) {
        case 'file': return _ea.ss($, ($) => ['file', (0, exports.Group)($)]);
        case 'directory': return _ea.ss($, ($) => ['directory', (0, exports.Directory)($)]);
        default: return _ea.au($[0]);
    }
})));
exports.Directory = Directory;
const Group = ($) => {
    return _ea.build_list(($i) => {
        const Group_Part = ($, $p) => {
            switch ($[0]) {
                case 'block':
                    _ea.ss($, ($) => {
                        $i['add element']({
                            'indentation': $p['current indentation'],
                            'text': $,
                        });
                    });
                    break;
                case 'nested block':
                    _ea.ss($, ($) => {
                        Block($, { 'current indentation': $p['current indentation'] });
                    });
                    break;
                case 'nothing':
                    _ea.ss($, ($) => {
                        // do nothing
                    });
                    break;
                case 'sub group':
                    _ea.ss($, ($) => {
                        Group($, { 'current indentation': $p['current indentation'] });
                    });
                    break;
                case 'optional':
                    _ea.ss($, ($) => {
                        $.map(($) => {
                            Group_Part($, { 'current indentation': $p['current indentation'] });
                        });
                    });
                    break;
                default: _ea.au($[0]);
            }
        };
        const Group = ($, $p) => {
            $.__for_each(($) => {
                Group_Part($, { 'current indentation': $p['current indentation'] });
            });
        };
        const Block = ($, $p) => {
            let current_line = null;
            const Block2 = ($) => {
                $.__for_each(($) => {
                    Block_Part($);
                });
            };
            const Block_Part = ($) => {
                switch ($[0]) {
                    case 'snippet':
                        _ea.ss($, ($) => {
                            current_line = current_line === null ? $ : current_line + $;
                        });
                        break;
                    case 'indent':
                        _ea.ss($, ($) => {
                            if (current_line !== null) {
                                $i['add element']({
                                    'indentation': $p['current indentation'],
                                    'text': current_line,
                                });
                            }
                            current_line = null;
                            Group($, { 'current indentation': $p['current indentation'] + 1 });
                        });
                        break;
                    case 'nothing':
                        _ea.ss($, ($) => {
                            // do nothing
                        });
                        break;
                    case 'sub block':
                        _ea.ss($, ($) => {
                            Block2($);
                        });
                        break;
                    case 'optional':
                        _ea.ss($, ($) => {
                            $.map(($) => {
                                Block_Part($);
                            });
                        });
                        break;
                    default: _ea.au($[0]);
                }
            };
            Block2($);
            if (current_line !== null) {
                $i['add element']({
                    'indentation': $p['current indentation'],
                    'text': current_line,
                });
            }
        };
        Group($, { 'current indentation': 0 });
    });
};
exports.Group = Group;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VtaV9saW5lcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1hdGlvbnMvYmxvY2svc2VtaV9saW5lcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHNEQUF1QztBQUtoQyxNQUFNLFNBQVMsR0FBRyxDQUNyQixDQUFpQixFQUNGLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBcUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDbkYsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNYLEtBQUssTUFBTSxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBQSxhQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3hELEtBQUssV0FBVyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBQSxpQkFBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0RSxPQUFPLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDaEMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQVJTLFFBQUEsU0FBUyxhQVFsQjtBQUVHLE1BQU0sS0FBSyxHQUFHLENBQ2pCLENBQWEsRUFDRixFQUFFO0lBRWIsT0FBTyxHQUFHLENBQUMsVUFB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