import * as _et from 'exupery-core-types';
import * as _target from "../generated/interface/schemas/block/data_types/target";
import * as sh from "exupery-core-data/dist/shorthands/unconstrained";
export declare namespace g {
    const simple_block: (block: string) => _target.Group_Part;
    const nested_block: (snippets: sh.Raw_Or_Normal_Array<_target.Block.L>) => _target.Group_Part;
    const sub: (group_parts: sh.Raw_Or_Normal_Array<_target.Group.L>) => _target.Group_Part;
    const nothing: () => _target.Group_Part;
    const optional: (Group_Part: _et.Optional_Value<_target.Group.L>) => _target.Group_Part;
}
export declare namespace b {
    const indent: (blocks: sh.Raw_Or_Normal_Array<_target.Group.L>) => _target.Block_Part;
    const snippet: (snippet: string) => _target.Block_Part;
    const sub: (block_parts: sh.Raw_Or_Normal_Array<_target.Block.L>) => _target.Block_Part;
    const nothing: () => _target.Block_Part;
    const optional: (block_part: _et.Optional_Value<_target.Block.L>) => _target.Block_Part;
}
export declare namespace n {
    const file: (block: _target.Group) => _target.Node;
    const directory: (children: sh.Raw_Or_Normal_Dictionary<_target.Node>) => _target.Node;
}
export declare const directory: (children: sh.Raw_Or_Normal_Dictionary<_target.Node>) => _target.Directory;
export declare const group: (Group_Parts: sh.Raw_Or_Normal_Array<_target.Group.L>) => _target.Group;
