import * as _i_in from "./data_types/source";
import * as _i_out from "../../core/astn_target";
import * as _i_vs from "./value_serializers";
export type _T_Directory = ($$_: _i_in._T_Directory, $$_p: {
    readonly 'value serializers': _i_vs._T_Value_Serializers;
}) => _i_out._T_Value;
export type _T_Lines = ($$_: _i_in._T_Lines, $$_p: {
    readonly 'value serializers': _i_vs._T_Value_Serializers;
}) => _i_out._T_Value;
export type Directory = _T_Directory;
export type Lines = _T_Lines;
export declare namespace _T_Directory {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Directory;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace _T_Lines {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Lines;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace Directory {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Directory;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
export declare namespace Lines {
    namespace CONTEXT {
    }
    type CONTEXT = _i_in._T_Lines;
    namespace PARAMS {
        namespace value_serializers {
        }
        type value_serializers = _i_vs._T_Value_Serializers;
    }
    namespace RESULT {
    }
    type RESULT = _i_out._T_Value;
}
