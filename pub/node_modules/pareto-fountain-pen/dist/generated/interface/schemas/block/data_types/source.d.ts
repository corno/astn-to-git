import * as _pt from 'exupery-core-types';
import * as _i_core from "../../../core/resolved";
export type _T_Block = _i_core._T_List<null, _T_Block_Part>;
export type _T_Block_Part = _i_core._T_State_Group<null, readonly ['indent', _T_Group] | readonly ['nothing', null] | readonly ['optional', _pt.Optional_Value<_T_Block_Part>] | readonly ['snippet', string] | readonly ['sub block', _T_Block]>;
export type _T_Directory = _i_core._T_Dictionary<null, _T_Node>;
export type _T_Group = _i_core._T_List<null, _T_Group_Part>;
export type _T_Group_Part = _i_core._T_State_Group<null, readonly ['block', string] | readonly ['nested block', _T_Block] | readonly ['nothing', null] | readonly ['optional', _pt.Optional_Value<_T_Group_Part>] | readonly ['sub group', _T_Group]>;
export type _T_Node = _i_core._T_State_Group<null, readonly ['directory', _T_Directory] | readonly ['file', _T_Group]>;
export type Block = _T_Block;
export type Block_Part = _T_Block_Part;
export type Directory = _T_Directory;
export type Group = _T_Group;
export type Group_Part = _T_Group_Part;
export type Node = _T_Node;
export declare namespace _T_Block {
    namespace L {
    }
    type L = _T_Block_Part;
}
export declare namespace _T_Block_Part {
    namespace SG {
        namespace indent {
        }
        type indent = _T_Group;
        type nothing = null;
        namespace optional {
            namespace O {
            }
            type O = _T_Block_Part;
        }
        type optional = _pt.Optional_Value<_T_Block_Part>;
        type snippet = string;
        namespace sub_block {
        }
        type sub_block = _T_Block;
    }
    type SG = readonly ['indent', _T_Group] | readonly ['nothing', null] | readonly ['optional', _pt.Optional_Value<_T_Block_Part>] | readonly ['snippet', string] | readonly ['sub block', _T_Block];
}
export declare namespace _T_Directory {
    namespace D {
    }
    type D = _T_Node;
}
export declare namespace _T_Group {
    namespace L {
    }
    type L = _T_Group_Part;
}
export declare namespace _T_Group_Part {
    namespace SG {
        type block = string;
        namespace nested_block {
        }
        type nested_block = _T_Block;
        type nothing = null;
        namespace optional {
            namespace O {
            }
            type O = _T_Group_Part;
        }
        type optional = _pt.Optional_Value<_T_Group_Part>;
        namespace sub_group {
        }
        type sub_group = _T_Group;
    }
    type SG = readonly ['block', string] | readonly ['nested block', _T_Block] | readonly ['nothing', null] | readonly ['optional', _pt.Optional_Value<_T_Group_Part>] | readonly ['sub group', _T_Group];
}
export declare namespace _T_Node {
    namespace SG {
        namespace directory {
        }
        type directory = _T_Directory;
        namespace file {
        }
        type file = _T_Group;
    }
    type SG = readonly ['directory', _T_Directory] | readonly ['file', _T_Group];
}
export declare namespace Block {
    namespace L {
    }
    type L = _T_Block_Part;
}
export declare namespace Block_Part {
    namespace SG {
        namespace indent {
        }
        type indent = _T_Group;
        type nothing = null;
        namespace optional {
            namespace O {
            }
            type O = _T_Block_Part;
        }
        type optional = _pt.Optional_Value<_T_Block_Part>;
        type snippet = string;
        namespace sub_block {
        }
        type sub_block = _T_Block;
    }
    type SG = readonly ['indent', _T_Group] | readonly ['nothing', null] | readonly ['optional', _pt.Optional_Value<_T_Block_Part>] | readonly ['snippet', string] | readonly ['sub block', _T_Block];
}
export declare namespace Directory {
    namespace D {
    }
    type D = _T_Node;
}
export declare namespace Group {
    namespace L {
    }
    type L = _T_Group_Part;
}
export declare namespace Group_Part {
    namespace SG {
        type block = string;
        namespace nested_block {
        }
        type nested_block = _T_Block;
        type nothing = null;
        namespace optional {
            namespace O {
            }
            type O = _T_Group_Part;
        }
        type optional = _pt.Optional_Value<_T_Group_Part>;
        namespace sub_group {
        }
        type sub_group = _T_Group;
    }
    type SG = readonly ['block', string] | readonly ['nested block', _T_Block] | readonly ['nothing', null] | readonly ['optional', _pt.Optional_Value<_T_Group_Part>] | readonly ['sub group', _T_Group];
}
export declare namespace Node {
    namespace SG {
        namespace directory {
        }
        type directory = _T_Directory;
        namespace file {
        }
        type file = _T_Group;
    }
    type SG = readonly ['directory', _T_Directory] | readonly ['file', _T_Group];
}
