"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = exports.Group_Part = exports.Group = exports.Directory = exports.Block_Part = exports.Block = void 0;
const _pa = __importStar(require("exupery-core-alg"));
const _i_generic = __importStar(require("../../generic/unmarshall"));
const Block = ($, $p) => _i_generic.process_unconstrained_list($, {
    'value': ($) => (0, exports.Block_Part)($, {
        'value deserializers': $p['value deserializers'],
    }),
});
exports.Block = Block;
const Block_Part = ($, $p) => _i_generic.process_unconstrained_state_group($, {
    'states': _pa.dictionary_literal({
        'indent': ($) => ['indent', (0, exports.Group)($, {
                'value deserializers': $p['value deserializers'],
            })],
        'nothing': ($) => ['nothing', _i_generic.process_nothing($, null)],
        'optional': ($) => ['optional', _i_generic.process_optional($, {
                'value': ($) => (0, exports.Block_Part)($, {
                    'value deserializers': $p['value deserializers'],
                }),
            })],
        'snippet': ($) => ['snippet', _i_generic.process_text($, null)],
        'sub block': ($) => ['sub block', (0, exports.Block)($, {
                'value deserializers': $p['value deserializers'],
            })],
    }),
});
exports.Block_Part = Block_Part;
const Directory = ($, $p) => _i_generic.process_unconstrained_dictionary($, {
    'value': ($) => (0, exports.Node)($, {
        'value deserializers': $p['value deserializers'],
    }),
});
exports.Directory = Directory;
const Group = ($, $p) => _i_generic.process_unconstrained_list($, {
    'value': ($) => (0, exports.Group_Part)($, {
        'value deserializers': $p['value deserializers'],
    }),
});
exports.Group = Group;
const Group_Part = ($, $p) => _i_generic.process_unconstrained_state_group($, {
    'states': _pa.dictionary_literal({
        'block': ($) => ['block', _i_generic.process_text($, null)],
        'nested block': ($) => ['nested block', (0, exports.Block)($, {
                'value deserializers': $p['value deserializers'],
            })],
        'nothing': ($) => ['nothing', _i_generic.process_nothing($, null)],
        'optional': ($) => ['optional', _i_generic.process_optional($, {
                'value': ($) => (0, exports.Group_Part)($, {
                    'value deserializers': $p['value deserializers'],
                }),
            })],
        'sub group': ($) => ['sub group', (0, exports.Group)($, {
                'value deserializers': $p['value deserializers'],
            })],
    }),
});
exports.Group_Part = Group_Part;
const Node = ($, $p) => _i_generic.process_unconstrained_state_group($, {
    'states': _pa.dictionary_literal({
        'directory': ($) => ['directory', (0, exports.Directory)($, {
                'value deserializers': $p['value deserializers'],
            })],
        'file': ($) => ['file', (0, exports.Group)($, {
                'value deserializers': $p['value deserializers'],
            })],
    }),
});
exports.Node = Node;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5tYXJzaGFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9nZW5lcmF0ZWQvaW1wbGVtZW50YXRpb24vc2NoZW1hcy9ibG9jay91bm1hcnNoYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0RBQXVDO0FBR3ZDLHFFQUFzRDtBQU0vQyxNQUFNLEtBQUssR0FBMkIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsMEJBQTBCLENBQ3pGLENBQUMsRUFDRDtJQUNJLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBQSxrQkFBVSxFQUN0QixDQUFDLEVBQ0Q7UUFDSSxxQkFBcUIsRUFBRSxFQUFFLENBQUMscUJBQXFCLENBQUM7S0FDbkQsQ0FDSjtDQUNKLENBQ0osQ0FBQTtBQVZZLFFBQUEsS0FBSyxTQVVqQjtBQUNNLE1BQU0sVUFBVSxHQUFnQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQ0FBaUMsQ0FDMUcsQ0FBQyxFQUNEO0lBQ0ksUUFBUSxFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQztRQUM3QixRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQTJCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFBLGFBQUssRUFDdEQsQ0FBQyxFQUNEO2dCQUNJLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzthQUNuRCxDQUNKLENBQUM7UUFDRixTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQTJCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsZUFBZSxDQUM3RSxDQUFDLEVBQ0QsSUFBSSxDQUNQLENBQUM7UUFDRixVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQTJCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsZ0JBQWdCLENBQ2hG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