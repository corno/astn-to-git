"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lines = exports.Directory = void 0;
const _pa = __importStar(require("exupery-core-alg"));
const _i_generic = __importStar(require("../../generic/unmarshall"));
const Directory = ($, $p) => _i_generic.process_unconstrained_dictionary($, {
    'value': ($) => _i_generic.process_unconstrained_state_group($, {
        'states': _pa.dictionary_literal({
            'directory': ($) => ['directory', (0, exports.Directory)($, {
                    'value deserializers': $p['value deserializers'],
                })],
            'file': ($) => ['file', (0, exports.Lines)($, {
                    'value deserializers': $p['value deserializers'],
                })],
        }),
    }),
});
exports.Directory = Directory;
const Lines = ($, $p) => _i_generic.process_unconstrained_list($, {
    'value': ($) => _i_generic.process_text($, null),
});
exports.Lines = Lines;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5tYXJzaGFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9nZW5lcmF0ZWQvaW1wbGVtZW50YXRpb24vc2NoZW1hcy9saW5lcy91bm1hcnNoYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0RBQXVDO0FBR3ZDLHFFQUFzRDtBQU0vQyxNQUFNLFNBQVMsR0FBK0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0NBQWdDLENBQ3ZHLENBQUMsRUFDRDtJQUNJLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLGlDQUFpQyxDQUN4RCxDQUFDLEVBQ0Q7UUFDSSxRQUFRLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDO1lBQzdCLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBNEIsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUEsaUJBQVMsRUFDakUsQ0FBQyxFQUNEO29CQUNJLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztpQkFDbkQsQ0FDSixDQUFDO1lBQ0YsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUE0QixFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBQSxhQUFLLEVBQ25ELENBQUMsRUFDRDtvQkFDSSxxQkFBcUIsRUFBRSxFQUFFLENBQUMscUJBQXFCLENBQUM7aUJBQ25ELENBQ0osQ0FBQztTQUNMLENBQUM7S0FDTCxDQUNKO0NBQ0osQ0FDSixDQUFBO0FBdkJZLFFBQUEsU0FBUyxhQXVCckI7QUFDTSxNQUFNLEtBQUssR0FBMkIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsMEJBQTBCLENBQ3pGLENBQUMsRUFDRDtJQUNJLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FDbkMsQ0FBQyxFQUNELElBQUksQ0FDUDtDQUNKLENBQ0osQ0FBQTtBQVJZLFFBQUEsS0FBSyxTQVFqQiJ9