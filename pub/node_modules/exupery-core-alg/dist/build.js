"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build_dictionary = exports.build_text = exports.build_list = void 0;
const _ei = __importStar(require("exupery-core-internals"));
const build_list = ($) => {
    const temp = [];
    $({
        'add element': ($) => {
            temp.push($);
        },
        'add list': ($) => {
            temp.push(...$.__get_raw_copy());
        }
    });
    return _ei.array_literal(temp);
};
exports.build_list = build_list;
const build_text = ($c) => {
    let out = "";
    $c({
        'add snippet': ($) => {
            out += $;
        },
        'add character': ($) => {
            out += String.fromCodePoint($);
        }
    });
    return out;
};
exports.build_text = build_text;
const build_dictionary = ($) => {
    const temp = {};
    $({
        'add entry': (key, $) => {
            if (key in temp) {
                _ei.panic(`duplicate key in dictionary literal: ${key}`);
            }
            temp[key] = $;
        }
    });
    return _ei.dictionary_literal(temp);
};
exports.build_dictionary = build_dictionary;
