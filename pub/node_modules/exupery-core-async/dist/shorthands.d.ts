import * as _ei from 'exupery-core-internals';
import * as _et from 'exupery-core-types';
import { Unguaranteed } from "./types/Unguaranteed_Query";
import { Guaranteed } from "./types/Guaranteed_Query";
import { Guaranteed_Procedure, Guaranteed_Procedure_Initializer } from "./types/Guaranteed_Procedure";
import { Unguaranteed_Procedure_Initializer, Unguaranteed_Procedure } from "./types/Unguaranteed_Procedure";
import { Unguaranteed_Query_Initializer } from "./types/Unguaranteed_Query";
import { Guaranteed_Query_Initializer } from "./types/Guaranteed_Query";
import { Error_Handler } from "./types/Error_Handler";
/**
 *
 * @param action gpi
 * @param error_transform gt
 */
export declare const eh: <Parameters, Error>(action: Guaranteed_Procedure_Initializer<Parameters>, error_transform: _ei.Guaranteed_Transformation_Without_Parameters<Error, Parameters>) => Error_Handler<Error>;
export declare namespace gp {
    /**
     *
     * @param action gpi
     * @param query g.q
     * @returns
     */
    const action: <Parameters>(action: Guaranteed_Procedure_Initializer<Parameters>, query: Guaranteed.Query_<Parameters>) => Guaranteed_Procedure;
}
export declare namespace gq {
    /**
     *
     * @param query_result qr
     * @returns
     */
    const fixed: <Query_Result>(query_result: Query_Result) => Guaranteed.Query_<Query_Result>;
    /**
     *
     * @param the_query gqi
     * @param parameters g.q
     * @param result_transformation gt
     * @returns
     */
    const g: <Result_After_Transformation, Parameters, Query_Result>(the_query: Guaranteed_Query_Initializer<Parameters, Query_Result>, parameters: Guaranteed.Query_<Parameters>, result_transformation: _ei.Guaranteed_Transformation_Without_Parameters<Query_Result, Result_After_Transformation>) => Guaranteed.Query_<Result_After_Transformation>;
}
export declare namespace gt {
    /**
     *
     * @param the_transformation gt
     * @returns
     */
    const g: <In, Out>(the_transformation: _ei.Guaranteed_Transformation_Without_Parameters<In, Out>) => _ei.Guaranteed_Transformation_Without_Parameters<In, Out>;
}
export declare namespace up {
    /**
     *
     * @param action upi
     * @param query u.q
     */
    const action: <Error, Parameters>(action: Unguaranteed_Procedure_Initializer<Parameters, Error>, query: Unguaranteed.Query<Parameters, Error>) => Unguaranteed_Procedure<Error>;
    /**
     *
     * @param steps up[]
     * @returns
     */
    const sequence: <Error>(steps: Unguaranteed_Procedure<Error>[]) => Unguaranteed_Procedure<Error>;
    /**
     *
     * @param the_array up[]
     * @param aggregate_exceptions gt
     * @returns
     */
    const array: <Error, Element_Error>(the_array: _et.Array<Unguaranteed_Procedure<Element_Error>>, aggregate_exceptions: _ei.Guaranteed_Transformation_Without_Parameters<_et.Array<Element_Error>, Error>) => Unguaranteed_Procedure<Error>;
    /**
     *
     * @param the_dictionary dict<up>
     * @param aggregate_exceptions gt
     * @returns
     */
    const dictionary: <Error, Element_Error>(the_dictionary: _et.Dictionary<Unguaranteed_Procedure<Element_Error>>, aggregate_exceptions: _ei.Guaranteed_Transformation_Without_Parameters<_et.Dictionary<Element_Error>, Error>) => Unguaranteed_Procedure<Error>;
}
export declare namespace upi {
    /**
     *
     * @param action gpi
     */
    const g: <Parameters, Error>(action: Guaranteed_Procedure_Initializer<Parameters>) => Unguaranteed_Procedure_Initializer<Parameters, Error>;
    /**
     *
     * @param action upi
     */
    const u: <Parameters, Error, Action_Error>(action: Unguaranteed_Procedure_Initializer<Parameters, Action_Error>, error_transform: _ei.Guaranteed_Transformation_Without_Parameters<Action_Error, Error>, error_handler?: Error_Handler<Action_Error>) => Unguaranteed_Procedure_Initializer<Parameters, Error>;
}
export declare namespace uq {
    /**
     *
     * @param query_result qr
     * @returns
     */
    const fixed: <Query_Result, Error>(query_result: Query_Result) => Unguaranteed.Query<Query_Result, Error>;
    /**
     * unguaranteed query
     * @param the_query uqi
     * @param parameters u.q
     * @param result_transformation ut
     * @param error_transform gt
     * @param error_handler eh
     * @returns
     */
    const u: <Result_After_Transformation, Error, Parameters, Query_Result, Query_Error>(the_query: Unguaranteed_Query_Initializer<Parameters, Query_Result, Query_Error>, parameters: Unguaranteed.Query<Parameters, Error>, result_transformation: _ei.Unguaranteed_Transformation_Without_Parameters<Query_Result, Result_After_Transformation, Error>, error_transform: _ei.Guaranteed_Transformation_Without_Parameters<Query_Error, Error>, error_handler?: Error_Handler<Query_Error>) => Unguaranteed.Query<Result_After_Transformation, Error>;
    /**
     * guaranteed query
     * @param the_query gqi
     * @param parameters u.q
     * @param result_transformation ut
     */
    const g: <Result_After_Transformation, Error, Parameters, Query_Result>(the_query: Guaranteed_Query_Initializer<Parameters, Query_Result>, parameters: Unguaranteed.Query<Parameters, Error>, result_transformation: _ei.Unguaranteed_Transformation_Without_Parameters<Query_Result, Result_After_Transformation, Error>) => Unguaranteed.Query<Result_After_Transformation, Error>;
}
export declare namespace ut {
    /**
     *
     * @param the_transformation ut
     * @param error_transform  gt
     * @param error_handler  eh
     * @returns
     */
    const u: <In, Out, Error, Transformation_Error>(the_transformation: _ei.Unguaranteed_Transformation_Without_Parameters<In, Out, Transformation_Error>, error_transform: _ei.Guaranteed_Transformation_Without_Parameters<Transformation_Error, Error>, error_handler?: Error_Handler<Transformation_Error>) => _ei.Unguaranteed_Transformation_Without_Parameters<In, Out, Error>;
    /**
     *
     * @param the_transformation gt
     */
    const g: <In, Out, Error>(the_transformation: _ei.Guaranteed_Transformation_Without_Parameters<In, Out>) => _ei.Unguaranteed_Transformation_Without_Parameters<In, Out, Error>;
}
