"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.query = void 0;
//types
__exportStar(require("./types/Guaranteed_Procedure"), exports);
__exportStar(require("./types/Unguaranteed_Procedure"), exports);
__exportStar(require("./types/Unguaranteed_Query"), exports);
__exportStar(require("./types/Guaranteed_Query"), exports);
//functions
__exportStar(require("./algorithms/query/merge_2_guaranteed_queries"), exports);
__exportStar(require("./algorithms/query/create_guaranteed_query"), exports);
__exportStar(require("./algorithms/query/create_unguaranteed_query"), exports);
__exportStar(require("./algorithms/procedure/initialize_guaranteed_procedure"), exports);
__exportStar(require("./algorithms/procedure/initialize_unguaranteed_procedure"), exports);
__exportStar(require("./shorthands"), exports);
const initialize_guaranteed_procedure_1 = require("./algorithms/procedure/initialize_guaranteed_procedure");
const initialize_unguaranteed_procedure_1 = require("./algorithms/procedure/initialize_unguaranteed_procedure");
const create_guaranteed_query_1 = require("./algorithms/query/create_guaranteed_query");
const create_unguaranteed_query_1 = require("./algorithms/query/create_unguaranteed_query");
exports.query = {
    'guaranteed': {
        'create result': ($) => {
            return (0, create_guaranteed_query_1.__create_guaranteed_query)({
                'execute': (on_value) => {
                    on_value($);
                }
            });
        }
    },
    'unguaranteed': {
        'create result': ($) => {
            return (0, create_unguaranteed_query_1.__create_unguaranteed_query)({
                'execute': (on_value) => {
                    on_value($);
                }
            });
        },
        'raise exception': ($) => {
            return (0, create_unguaranteed_query_1.__create_unguaranteed_query)({
                'execute': (on_value, on_exception) => {
                    on_exception($);
                }
            });
        }
    },
};
exports.command = {
    'guaranteed': {
        'initialize': initialize_guaranteed_procedure_1.initialize_no_op_guaranteed_procedure
    },
    'unguaranteed': {
        'initialize': initialize_unguaranteed_procedure_1.initialize_no_op_unguaranteed_procedure,
        'raise exception': ($) => {
            return (0, initialize_unguaranteed_procedure_1.__create_unguaranteed_procedure)({
                'execute': (on_success, on_exception) => {
                    on_exception($);
                }
            });
        },
    },
};
// //array
//     map_async<NT>(
//         handle_value: ($: T) => Safe_Query_Result<NT>
//     ): Safe_Query_Result<Array<NT>>
//     map_async_unsafe<NT, NE>(
//         handle_value: ($: T) => Unsafe_Query_Result<NT, NE>
//     ): Unsafe_Query_Result<Array<NT>, Array<NE>>
// //dictionary
//     /**
//      * 
//      * @param handle_value callback that provides an {@link Safe_Query_Result}. keys are not available.
//      */
//     query_safe_with_entries<NT>(
//         handle_value: ($: T) => Safe_Query_Result<NT>
//     ): Safe_Query_Result<Dictionary<NT>>
//     query_unsafe_with_entries<NT, NE>(
//         handle_value: ($: T) => Unsafe_Query_Result<NT, NE>,
//     ): Unsafe_Query_Result<Dictionary<NT>, Dictionary<NE>>
//     map_async<NT>(on_entry_value: ($: T) => _et.Async_Value<NT>): _et.Async_Value<_et.Dictionary<NT>> {
//         const source = this.source
//         const temp: { [key: string]: NT } = {}
//         return create_Async_Value(
//             {
//                 'execute': (on_dictionary_value) => {
//                     create_asynchronous_processes_monitor(
//                         (counter) => {
//                             source.map(($) => {
//                                 counter['report process started']()
//                                 on_entry_value($.value).__start((nv) => {
//                                     temp[$.key] = nv
//                                     counter['report process finished']()
//                                 })
//                             })
//                         },
//                         () => {
//                             on_dictionary_value(dictionary_literal(temp))
//                         }
//                     )
//                 }
//             }
//         )
//     }
//     map_async_unsafe<NT, NE>(on_entry_value: ($: T) => _et.Unsafe_Async_Value<NT, NE>): _et.Unsafe_Async_Value<_et.Dictionary<NT>, _et.Dictionary<NE>> {
//         const source = this.source
//         const temp_values: { [key: string]: NT } = {}
//         const temp_exceptions: { [key: string]: NE } = {}
//         return create_Unsafe_Async_Value(
//             {
//                 'execute': (
//                     on_dictionary_value,
//                     on_dictionary_exception,
//                 ) => {
//                     create_asynchronous_processes_monitor(
//                         (counter) => {
//                             source.map(($) => {
//                                 counter['report process started']()
//                                 on_entry_value($.value).__start(
//                                     (value) => {
//                                         temp_values[$.key] = value
//                                         counter['report process finished']()
//                                     },
//                                     (exception) => {
//                                         temp_exceptions[$.key] = exception
//                                         counter['report process finished']()
//                                     },
//                                 )
//                             })
//                         },
//                         () => {
//                             if (Object.keys(temp_exceptions).length > 0) {
//                                 on_dictionary_exception(dictionary_literal(temp_exceptions))
//                             } else {
//                                 on_dictionary_value(dictionary_literal(temp_values))
//                             }
//                         }
//                     )
//                 }
//             }
//         )
//     }
//     map_async<NT>(on_element_value: ($: T) => _et.Async_Value<NT>): _et.Async_Value<_et.Array<NT>> {
//         const data = this.data
//         return create_Async_Value(
//             {
//                 'execute': (on_array_value) => {
//                     const temp: NT[] = []
//                     create_asynchronous_processes_monitor(
//                         (registry) => {
//                             data.map(on_element_value).forEach((v) => {
//                                 registry['report process started']()
//                                 v.__start((v) => {
//                                     temp.push(v)
//                                     registry['report process finished']()
//                                 })
//                             })
//                         },
//                         () => {
//                             on_array_value(array_literal(temp))
//                         }
//                     )
//                 }
//             },
//         )
//     }
//     map_async_unsafe<NT, NE>(
//         on_element_value: ($: T) => _et.Unsafe_Async_Value<NT, NE>
//     ): _et.Unsafe_Async_Value<_et.Array<NT>, _et.Array<NE>> {
//         const data = this.data
//         return create_Unsafe_Async_Value(
//             {
//                 'execute': (
//                     on_array_value,
//                     on_array_exception,
//                 ) => {
//                     const temp_values: NT[] = []
//                     const temp_exceptions: NE[] = []
//                     create_asynchronous_processes_monitor(
//                         (registry) => {
//                             data.map(on_element_value).forEach((v) => {
//                                 registry['report process started']()
//                                 v.__start(
//                                     ($) => {
//                                         temp_values.push($)
//                                         registry['report process finished']()
//                                     },
//                                     ($) => {
//                                         temp_exceptions.push($)
//                                         registry['report process finished']()
//                                     }
//                                 )
//                             })
//                         },
//                         () => {
//                             if (temp_exceptions.length > 0) {
//                                 on_array_exception(array_literal(temp_exceptions))
//                             } else {
//                                 on_array_value(array_literal(temp_values))
//                             }
//                         }
//                     )
//                 }
//             },
//         )
//     }
