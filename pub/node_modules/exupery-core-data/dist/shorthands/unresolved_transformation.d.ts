import * as _et from 'exupery-core-types';
import * as pt from 'exupery-core-types';
import { Source_Location } from "../get_location_info";
export type Raw_Or_Normal_Dictionary<T> = {
    [key: string]: T;
} | pt.Dictionary<T>;
export type Raw_Or_Normal_Array<T> = T[] | pt.Array<T>;
export type Raw_Dictionary<T> = {
    [key: string]: T;
};
export type Reference_To_Normal_Dictionary_Entry<G_Source, T_Dictionary_Entry> = {
    readonly 'key': string;
    readonly 'location': G_Source;
};
export type Reference_To_Stacked_Dictionary_Entry<G_Source, T_Dictionary_Entry> = {
    readonly 'key': string;
    readonly 'location': G_Source;
};
export declare const to_raw_array: <T>($: pt.Array<T>) => readonly T[];
export type Dictionary<G_Source, T_D> = {
    readonly 'dictionary': _et.Dictionary<{
        readonly 'entry': T_D;
        readonly 'location': G_Source;
    }>;
    readonly 'location': G_Source;
};
export type List<G_Source, T_L> = {
    readonly 'list': _et.Array<{
        readonly 'element': T_L;
        readonly 'location': G_Source;
    }>;
    readonly 'location': G_Source;
};
export declare const wrap_dictionary: <T>($: Raw_Or_Normal_Dictionary<T>) => Dictionary<Source_Location, T>;
export declare const wrap_list: <T>($: Raw_Or_Normal_Array<T>) => List<Source_Location, T>;
export declare const wrap_state_group: <T>($: T) => {
    location: Source_Location;
    'state group': T;
};
export declare const wrap_reference: <T>($: string) => Reference_To_Normal_Dictionary_Entry<Source_Location, T>;
export declare const wrap_stack_reference: <T>(name: string) => Reference_To_Stacked_Dictionary_Entry<Source_Location, T>;
