"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.get_location_info = get_location_info;
exports.location_to_string = location_to_string;
const process_1 = require("process");
const path_1 = require("path");
/**
 *
 * @returns the string on the specified line
 */
function get_line(e, depth) {
    const regex = /\((.*)\)$/;
    //const regex = /\((.*):(\d+):(\d+)\)$/ //further splitted; file,line,column,
    if (e.stack === undefined) {
        throw new Error("NO STACK INFO");
    }
    const line = e.stack.split("\n")[depth + 2];
    const match = regex.exec(line);
    //determine the path relative to the current working directory
    return (0, path_1.relative)((0, process_1.cwd)(), (() => {
        if (match === null) {
            const begin = "    at /";
            if (line.startsWith(begin)) {
                return (0, path_1.relative)((0, process_1.cwd)(), line.substring(begin.length - 1));
            }
            else {
                throw new Error(`COULD NOT PARSE STACK LINE: ${line}`);
            }
        }
        else {
            return match[1];
        }
    })());
}
/**
 * provides the source location (filepath and line number) of the source code file where this function is called,
 * or if the depth is bigger than 0, the source location of the function at that stack depth
 * @param depth
 * @returns
 */
function get_location_info(depth) {
    //we create an error, not to be thrown but to be disected for its stack
    const e = new Error(); //don't move this statement to another function, it will change the depth of its stack
    const line = get_line(e, depth);
    const split = line.split(":");
    if (split.length !== 3) {
        throw new Error(`UNEXPECTED LOCATION FORMAT (CHECK THE DEPTH PARAMETER): ${line} (Expected 'file:line:column')`);
    }
    return {
        'file': split[0],
        'line': Number(split[1]),
        'column': Number(split[2]),
    };
}
function location_to_string(location) {
    return `${location.file}:${location.line}:${location.column}`;
}
